#!/usr/bin/env python3

"""
Calls the GitHub API to create or update a check run
"""
import logging
import sys
from json import dumps, loads
from os import getenv, listdir, path
from sys import argv, stderr, stdin
from typing import Dict, List

from requests import delete, get, patch, post


def get_webhook_url(atc_url: str, team: str, pipeline: str, resource: str, webhook_token: str) -> str:
    """
    Builds a webhook for a resource

    :param atc_url: the publicly accessible ATC URL for this Concourse instance
    :param team: the team for this pipeline
    :param pipeline: the pipeline for this resource
    :param resource: the name of this resource
    :param webhook_token: the webhook token for the resource
    :return: a complete webhook url
    """
    return (
        atc_url
        + "/api/v1/teams/"
        + team
        + "/pipelines/"
        + pipeline
        + "/resources/"
        + resource
        + "/check/webhook?webhook_token="
        + webhook_token
    )


def get_api_base_url(host: str) -> str:
    """
    Determines the correct API URL for a given GitHub server

    :param host: the GitHub host name
    :return: the full URL for the GitHub API
    """
    return "https://" + ("api.github.com" if host == "github.com" else host + "/api/v3")


ATC_EXTERNAL_URL = getenv("ATC_EXTERNAL_URL")
assert isinstance(ATC_EXTERNAL_URL, str)
BUILD_TEAM_NAME = getenv("BUILD_TEAM_NAME")
assert isinstance(BUILD_TEAM_NAME, str)
BUILD_PIPELINE_NAME = getenv("BUILD_PIPELINE_NAME")
assert isinstance(BUILD_PIPELINE_NAME, str)

required_source_fields = ("github_token", "webhook_token", "resources")
optional_source_fields = ("debug",)
required_resource_fields = ("github_uri", "events")

assert len(argv) == 2

input_directory = argv[1]

assert path.exists(input_directory)
assert path.isdir(input_directory)

if len(listdir(input_directory)) > 0:
    print(
        "To improve performance, you may want to manually configure the inputs to this step.", file=stderr,
    )

concourse_input = loads(stdin.read())

assert isinstance(concourse_input, dict)
assert "source" in concourse_input, "Missing required `source` fields"
assert isinstance(concourse_input["source"], dict), "`source` must be a dict, check pipeline configuration"

for source_field in required_source_fields:
    assert source_field in concourse_input["source"], f"Missing required field `{source_field}` in `source`"

for source_field in concourse_input["source"]:
    assert (
        source_field in required_source_fields or source_field in optional_source_fields
    ), f"Unexpected field `{source_field}` in `source`"

if "debug" in concourse_input["source"]:
    if not concourse_input["source"]["debug"] is True:
        print("Debug flag set to invalid value, check documentation")
        sys.exit(1)

    handler = logging.StreamHandler(stderr)
    handler.setLevel(logging.DEBUG)

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    logger.addHandler(handler)

    logger.debug("Debug logging enabled")

resources = concourse_input["source"]["resources"]

assert isinstance(resources, dict)
assert len(resources) > 0

for resource_name in resources:
    resource_config = resources[resource_name]
    assert isinstance(resource_config, dict)
    for resource_field in required_resource_fields:
        assert (
            resource_field in resource_config
        ), f"Missing required field `{resource_field}` in resource `{resource_name}`"
    for resource_field in resource_config:
        assert (
            resource_field in required_resource_fields
        ), f"Unexpected field `{resource_field}` in resource `{resource_name}`"

headers = {
    "Authorization": "Bearer " + concourse_input["source"]["github_token"],
    "User-Agent": "concourse-github-webhook-resource",
    "Accept": "application/vnd.github.v3+json",
}

repository_webhook_events: Dict[str, Dict[str, List[str]]] = {}
github_hosts = set()

for resource_name in resources:
    resource_config = resources[resource_name]
    repository = resource_config["github_uri"]
    concourse_webhook = get_webhook_url(
        ATC_EXTERNAL_URL,
        BUILD_TEAM_NAME,
        BUILD_PIPELINE_NAME,
        resource_name,
        concourse_input["source"]["webhook_token"],
    )
    events = resource_config["events"]

    github_hosts.add(repository.split("/")[2])

    if repository in repository_webhook_events:
        assert concourse_webhook not in repository_webhook_events[repository]
        repository_webhook_events[repository][concourse_webhook] = events
    else:
        repository_webhook_events[repository] = {concourse_webhook: events}

assert len(github_hosts) == 1, "This resource currently only supports a single GitHub server."

for repository in repository_webhook_events:
    for concourse_webhook in repository_webhook_events[repository]:
        response = post(concourse_webhook)
        assert (
            response.status_code == 201
        ), f"Got unexpected status code {response.status_code} from Concourse, verify configuration is correct"

for repository in repository_webhook_events:
    github_information = repository.split("/")
    api_base_url = get_api_base_url(github_information[2])
    owner = github_information[3]
    repo = github_information[4]
    response = get(f"{api_base_url}/repos/{owner}/{repo}/hooks", headers=headers)
    assert (
        response.status_code == 200
    ), f"Got unexpected response code {response.status_code} from GitHub: {response.json()}"
    for existing_webhook in response.json():
        url = existing_webhook["config"]["url"]
        if url.startswith(ATC_EXTERNAL_URL):
            if url in repository_webhook_events[repository]:
                if not set(existing_webhook["events"]) == set(repository_webhook_events[repository][url]):
                    response = patch(
                        existing_webhook["url"],
                        json={"events": repository_webhook_events[repository][url]},
                        headers=headers,
                    )
                    assert (
                        response.status_code == 200
                    ), f"Got unexpected response code {response.status_code} from GitHub: {response.json()}"
                del repository_webhook_events[repository][url]
                continue
            last_response = existing_webhook["last_response"]
            if last_response["code"] is not None and last_response != 201:
                response = delete(existing_webhook["url"], headers=headers)
                assert (
                    response.status_code == 204
                ), f"Got unexpected response code {response.status_code} from GitHub: {response.json()}"
    for new_webhook in repository_webhook_events[repository]:
        response = post(
            f"{api_base_url}/repos/{owner}/{repo}/hooks",
            json={"config": {"url": new_webhook}, "events": repository_webhook_events[repository][new_webhook]},
            headers=headers,
        )
        assert (
            response.status_code == 201
        ), f"Got unexpected response code {response.status_code} from GitHub: {response.json()}"

metadata = []

for repository in repository_webhook_events:
    github_information = repository.split("/")
    github_host = github_information[2]
    owner = github_information[3]
    repo = github_information[4]
    metadata.append({"name": repo, "value": f"https://{github_host}/{owner}/{repo}/settings/hooks"})

print(dumps({"version": {"status": "ok"}, "metadata": metadata}))
